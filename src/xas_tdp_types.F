!--------------------------------------------------------------------------------------------------! 
!   CP2K: A general program to perform molecular dynamics simulations                              ! 
!   Copyright (C) 2000 - 2017  CP2K developers group                                               ! 
!--------------------------------------------------------------------------------------------------!

!> *************************************************************************************************
!> \brief Define XAS TDP control type and associated create, release, etc subroutines, as well as
!>        XAS TDP environment type and associated set, get, etc subroutines
!> \author AB (11.2017)
!> *************************************************************************************************
MODULE xas_tdp_types
   USE cp_array_utils,                  ONLY: cp_2d_r_p_type, cp_1d_r_p_type 
   USE cp_fm_types,                     ONLY: cp_fm_type, cp_fm_release, cp_fm_p_type
   USE dbcsr_api,                       ONLY: dbcsr_type, dbcsr_release, dbcsr_p_type, &
                                              dbcsr_release_p
   USE input_constants,                 ONLY: xas_dip_vel,&
                                              xas_tdp_by_index,&
                                              xas_tdp_by_kind, &
                                              tddfpt_singlet, &
                                              tddfpt_triplet
   USE input_section_types,             ONLY: section_vals_type,&
                                              section_vals_val_get,&
                                              section_vals_get_subs_vals
   USE kinds,                           ONLY: dp ,default_string_length
   USE memory_utilities,                ONLY: reallocate
   USE qs_grid_atom,                    ONLY: grid_atom_type, deallocate_grid_atom
   USE qs_harmonics_atom,               ONLY: harmonics_atom_type, deallocate_harmonics_atom
   USE qs_loc_types,                    ONLY: qs_loc_env_new_type,&
                                              qs_loc_env_release
                                     
#include "./base/base_uses.f90"

   IMPLICIT NONE

   PRIVATE

! **************************************************************************************************
!> \brief Type containing control information for TDP XAS calculations
!> \param define_excited whether excited atoms are chosen by kind or index
!> \param dipole_form whether the dipole moment is computed in the length or velocity representation
!> \param n_search # of lowest energy MOs to search for donor orbitals
!> \param check_donor_states whether one only checks MO to donor state assignment
!> \param do_hfx whether exact exchange is included
!> \param do_xc wheter xc functional(s) is(are) included
!> \param sx the scaling applied to exact exchange
!> \param tamm_dancoff whether the calculations should be done in the Tamm-Dancoff approximation
!> \param list_ex_atoms list of excited atom indices, kept empty if define_excited=by_kind
!> \param list_ex_kinds list of excited atom kinds, kept empty if define_excited=by_index
!> \param do_singlet whether singlet excitations should be computed
!> \param do_triplet whether triplet excitations should be computed
!> \param do_soc whether spin-orbit coupling should be included
!> \param n_excited the number of excited states to compute
!> \param state_types columns correspond to the states to excite for each atom kind/index
!>                    the number of rows is the number of times the keyword is repeated
!> \param grid_info the information about the atomic grids used for the xc kernel integrals
! **************************************************************************************************
   TYPE xas_tdp_control_type
      INTEGER                                 :: define_excited   
      INTEGER                                 :: dipole_form
      INTEGER                                 :: n_search
      INTEGER                                 :: n_excited
      REAL(dp)                                :: sx
      LOGICAL                                 :: do_hfx
      LOGICAL                                 :: do_xc
      LOGICAL                                 :: check_donor_states
      LOGICAL                                 :: tamm_dancoff
      LOGICAL                                 :: do_soc
      LOGICAL                                 :: do_singlet
      LOGICAL                                 :: do_triplet
      INTEGER, DIMENSION(:), POINTER          :: list_ex_atoms
      CHARACTER(len=default_string_length),&
                     DIMENSION(:), POINTER    :: list_ex_kinds
      INTEGER, DIMENSION(:,:), POINTER        :: state_types 
      TYPE(section_vals_type), POINTER        :: loc_subsection
      TYPE(section_vals_type), POINTER        :: print_loc_subsection
      CHARACTER(len=default_string_length),&
                     DIMENSION(:,:), POINTER  :: grid_info

   END TYPE xas_tdp_control_type
   
!> *************************************************************************************************
!> \brief Type containing informations such as inputs and results for TDP XAS calculations
!> \param state_type_char an array containing the general donor state types as char (1s, 2s, 2p, ...)
!> \param nex_atoms number of excited atoms
!> \param nex_kinds number of excited kinds
!> \param ex_atom_indices array containing the indices of the excited atoms
!> \param ex_kind_indices array containing the indices of the excited kinds
!> \param state_types columns correspond to the different donor states of each excited atom
!> \param qs_loc_env the environemnt type dealing with the possible localization of donor orbitals
!> \param mos_of_ex_atoms links lowest energy MOs to excited atoms. Elements of value 1 mark the
!>        association between the MO irow and the excited atom icolumn
!> \param ri_inv_mats collection of kind specific electron repulsion inverse matrices for each
!>        excited kinds, based on basis functions of the RI auxiliary basis used for Coulomb and
!>        exchange kernels. 
!> \param q_projector the projector on the unperturbed, unoccupied ground state as a dbcsr matrix
!> \param p_projector the projector on the unperturbed, occupied ground state 
!> \param dipmat the dbcsr matrices containing the dipole in x,y,z directions evaluated on the 
!>        contracted spherical gaussians. It can either be in the length or the velocity 
!>        representation. For length representation, it has to be computed once with the origin on 
!>        each excited atom
!> \param ri_coul3 the 3D array (TODO: dbcsr tensor in the future) containing the 3-center coulomb
!>        integrals (ab|P) with the RI basis centered on P. Updated for each new excited atom
!> \param ri_fxc_sg the matrix in which the singlet kernel RI integrals on the atomic grid are stored
!> \param ri_fxc_tp the matrix in which the triplet kernel RI integrals on the atomic grid are stored
!> \param orb_soc the matrix where the SOC is evaluated wrt the orbital basis set, for x,y,z
!> *************************************************************************************************
   TYPE xas_tdp_env_type
      CHARACTER(len=2), DIMENSION(3)          :: state_type_char
      INTEGER                                 :: nex_atoms
      INTEGER                                 :: nex_kinds
      INTEGER, DIMENSION(:), POINTER          :: ex_atom_indices
      INTEGER, DIMENSION(:), POINTEr          :: ex_kind_indices
      INTEGER, DIMENSION(:,:), POINTER        :: state_types
      REAL(dp), DIMENSION(:,:,:), POINTER     :: ri_coul3
      TYPE(donor_state_type), DIMENSION(:),&
                        POINTER               :: donor_states
      INTEGER, DIMENSION(:,:), POINTER        :: mos_of_ex_atoms
      TYPE(qs_loc_env_new_type), POINTER      :: qs_loc_env
      TYPE(cp_2d_r_p_type), DIMENSION(:), &
                                    POINTER   :: ri_inv_mats
      TYPE(dbcsr_type), POINTER               :: q_projector
      TYPE(dbcsr_type), POINTER               :: p_projector
      TYPE(dbcsr_p_type), DIMENSION(:), &
                                    POINTER   :: dipmat
      TYPE(dbcsr_type), POINTER               :: ri_fxc_sg
      TYPE(dbcsr_type), POINTER               :: ri_fxc_tp
      TYPE(dbcsr_p_type), DIMENSION(:), &
                                    POINTER   :: orb_soc
   END TYPE xas_tdp_env_type

!> *************************************************************************************************
!> \brief Type containing informations about a single donor state
!> \param at_index the index of the atom to which the state belongs
!> \param kind_index the index of the atomic kind to which the state belongs
!> \param at_symbol the chemical symbol of the atom to which the state belongs
!> \param state_type whether this is a 1s, 2s, etc state
!> \param energy_evals the energy eigenvalue of the donor state 
!> \param mo_indices indices of associated MOs. Greater than 1 when not a s-type state.
!> \param sg_coeffs solutions of the linear-response TDDFT singlet equations
!> \param tp_coeffs solutions of the linear-response TDDFT triplet equations
!> \param gs_coeffs the ground state MO coefficients 
!> \param sg_evals singlet excitation energies => the eigenvalues of the linear response equation
!> \param tp_evals triplet excitation energies => the eigenvalues of the linear response equation
!> \param soc_evals excitation energies after inclusion of SOC
!> \param sg_osc_str oscillator strengths for the different excitation energies of singlets
!> \param tp_osc_str oscillator strengths for the different excitation energies of triplets
!> \param soc_osc_str oscillator strengths after the inclusion of SOC
!> \param sg_matrix_tdp the dbcsr matrix to be diagonalized to solve the problem for singlets
!> \param tp_matrix_tdp the dbcsr matrix to be diagonalized to solve the problem for triplets
!> \param metric the metric of the linear response problem M*c = omega*S*c and its inverse
!> \param matrix_aux the auxiliary matrix (A-D+E)^+-1/2 used to make the problem Hermitian
!> *************************************************************************************************
   TYPE donor_state_type
      INTEGER                                 :: at_index
      INTEGER                                 :: kind_index
      CHARACTER(len=2)                        :: at_symbol
      INTEGER                                 :: state_type
      REAL(dp), DIMENSION(:), POINTER         :: energy_evals
      INTEGER, DIMENSION(:), POINTER          :: mo_indices
      TYPE(cp_fm_p_type), DIMENSION(:), &
                                    POINTER   :: sg_coeffs
      TYPE(cp_fm_p_type), DIMENSION(:), &
                                    POINTER   :: tp_coeffs
      TYPE(cp_fm_type), POINTER               :: gs_coeffs
      REAL(dp), DIMENSION(:), POINTER         :: sg_evals
      REAL(dp), DIMENSION(:), POINTER         :: tp_evals
      REAL(dp), DIMENSION(:), POINTER         :: soc_evals
      REAL(dp), DIMENSION(:), POINTER         :: soc_osc_str
      REAL(dp), DIMENSION(:), POINTER         :: sg_osc_str
      REAL(dp), DIMENSION(:), POINTER         :: tp_osc_str
      TYPE(dbcsr_type), POINTER               :: sg_matrix_tdp
      TYPE(dbcsr_type), POINTER               :: tp_matrix_tdp
      TYPE(dbcsr_p_type), DIMENSION(:), &
                                    POINTER   :: metric
      TYPE(dbcsr_p_type), DIMENSION(:), &
                                    POINTER   :: matrix_aux

   END TYPE donor_state_type

!  Some helper types
   TYPE grid_atom_p_type
      TYPE(grid_atom_type), POINTER                   :: grid_atom
   END TYPE grid_atom_p_type
   
   TYPE harmonics_atom_p_type
      TYPE(harmonics_atom_type), POINTER              :: harmonics_atom
   END TYPE harmonics_atom_p_type

! **************************************************************************************************
!> \brief a environment type that contains all the info needed for XAS_TDP atomic grid calculations
!> \param excited_atoms the atoms for which RI xc-kernel calculations must be done
!> \param excited_kinds the kinds for which RI xc-kernel calculations must be done 
!> \param grid_atom_set the set of atomic grid for each kind
!> \param ri_blk_size the block sizes of the dbcsr_matrix that will hold the RI integrals 
!> \param ri_dcoeff the expansion coefficients to express the density in the RI basis for each atom
!> \param ri_sphi_so contains the coefficient for direct contraction from so to sgf, for the ri basis
!> \param orb_sphi_so contains the coefficient for direct contraction from so to sgf, for the orb basis
!> *************************************************************************************************
   TYPE xas_atom_env_type
      INTEGER, DIMENSION(:), POINTER                  :: excited_atoms
      INTEGER, DIMENSION(:), POINTER                  :: excited_kinds
      TYPE(grid_atom_p_type), DIMENSION(:), POINTER   :: grid_atom_set
      TYPE(harmonics_atom_p_type), DIMENSION(:), & 
                                             POINTER  :: harmonics_atom_set
      INTEGER, DIMENSION(:), POINTER                  :: ri_blk_size
      TYPE(cp_1d_r_p_type), DIMENSION(:), POINTER     :: ri_dcoeff
      TYPE(cp_2d_r_p_type), DIMENSION(:), POINTER     :: ri_sphi_so
      TYPE(cp_2d_r_p_type), DIMENSION(:), POINTER     :: orb_sphi_so
   END TYPE xas_atom_env_type

   CHARACTER(len=*), PARAMETER, PRIVATE  :: moduleN = 'xas_tdp_types'

! *** Public data types ***
   PUBLIC :: xas_tdp_env_type, donor_state_type, xas_tdp_control_type, xas_atom_env_type

! *** Public subroutines ***
   PUBLIC :: set_donor_state, free_ds_memory, &
             xas_tdp_env_create, xas_tdp_env_release, set_xas_tdp_env, &
             xas_tdp_control_create, xas_tdp_control_release, read_xas_tdp_control, &
             xas_atom_env_create, xas_atom_env_release

CONTAINS

! **************************************************************************************************
!> \brief Creates and initializes the xas_tdp_control_type
!> \param xas_tdp_control the type to initialize
! **************************************************************************************************
   SUBROUTINE xas_tdp_control_create(xas_tdp_control)
      
      TYPE(xas_tdp_control_type), POINTER                :: xas_tdp_control

      CHARACTER(len=*), PARAMETER                        :: routineN = 'xas_tdp_control_create', &
                                                            routineP = moduleN//':'//routineN
      
      CPASSERT(.NOT. ASSOCIATED(xas_tdp_control))
      ALLOCATE (xas_tdp_control)
      
      xas_tdp_control%dipole_form = xas_dip_vel
      xas_tdp_control%define_excited = xas_tdp_by_index
      xas_tdp_control%n_search = -1
      xas_tdp_control%do_hfx = .TRUE.
      xas_tdp_control%do_xc = .FALSE.
      xas_tdp_control%sx = 1.0_dp
      xas_tdp_control%check_donor_states = .FALSE.
      xas_tdp_control%tamm_dancoff = .FALSE.
      xas_tdp_control%do_soc = .FALSE.
      xas_tdp_control%do_singlet = .TRUE.
      xas_tdp_control%do_triplet = .FALSE.
      xas_tdp_control%n_excited = -1
      NULLIFY (xas_tdp_control%state_types)
      NULLIFY (xas_tdp_control%list_ex_atoms)
      NULLIFY (xas_tdp_control%list_ex_kinds)
      NULLIFY (xas_tdp_control%loc_subsection)
      NULLIFY (xas_tdp_control%print_loc_subsection)

   END SUBROUTINE xas_tdp_control_create

! **************************************************************************************************
!> \brief Releases the xas_tdp_control_type
!> \param xas_tdp_control the type to release
! **************************************************************************************************
   SUBROUTINE xas_tdp_control_release(xas_tdp_control)
      
      TYPE(xas_tdp_control_type), POINTER                :: xas_tdp_control

      CHARACTER(len=*), PARAMETER                        :: routineN = 'xas_tdp_control_release', &
                                                            routineP = moduleN//':'//routineN
      
      IF (ASSOCIATED(xas_tdp_control)) THEN
         IF (ASSOCIATED(xas_tdp_control%list_ex_atoms)) THEN
            DEALLOCATE (xas_tdp_control%list_ex_atoms)
         END IF
         IF (ASSOCIATED(xas_tdp_control%list_ex_kinds)) THEN
            DEALLOCATE (xas_tdp_control%list_ex_kinds)
         END IF
         IF (ASSOCIATED(xas_tdp_control%state_types)) THEN
            DEALLOCATE(xas_tdp_control%state_types)
         END IF
         IF (ASSOCIATED(xas_tdp_control%grid_info)) THEN
            DEALLOCATE(xas_tdp_control%grid_info)
         END IF
         DEALLOCATE (xas_tdp_control)
      END IF

   END SUBROUTINE xas_tdp_control_release

! **************************************************************************************************
!> \brief Reads the inputs and stores in xas_tdp_control_type
!> \param xas_tdp_control the type where inputs are stored
!> \param xas_tdp_section the section from which input are read
! **************************************************************************************************
   SUBROUTINE read_xas_tdp_control(xas_tdp_control, xas_tdp_section)

      TYPE(xas_tdp_control_type), POINTER                :: xas_tdp_control
      TYPE(section_vals_type), POINTER                   :: xas_tdp_section
      
      CHARACTER(len=*), PARAMETER                        :: routineN = 'read_xas_tdp_control', &
                                                            routineP = moduleN//':'//routineN

      INTEGER                                            :: irep, nrep, nexc, excitation 
      CHARACTER(len=default_string_length),&
                     DIMENSION(:), POINTER               :: k_list
      INTEGER, DIMENSION(:), POINTER                     :: a_list, t_list

      NULLIFY (k_list, a_list, t_list)
      
      CALL section_vals_val_get(xas_tdp_section, "DEFINE_EXCITED", &
                                i_val=xas_tdp_control%define_excited)

      CALL section_vals_val_get(xas_tdp_section, "DIPOLE_FORM", i_val=xas_tdp_control%dipole_form)

      CALL section_vals_val_get(xas_tdp_section, "ONLY_CHECK_DONOR_STATES", &
                                l_val=xas_tdp_control%check_donor_states)

      CALL section_vals_val_get(xas_tdp_section, "TAMM_DANCOFF", &
                                l_val=xas_tdp_control%tamm_dancoff)
                           
      CALL section_vals_val_get(xas_tdp_section, "SPIN_ORBIT_COUPLING", &
                                l_val=xas_tdp_control%do_soc)

      CALL section_vals_val_get(xas_tdp_section, "EXCITATIONS", i_val=excitation)
      IF (excitation == tddfpt_singlet) THEN
         xas_tdp_control%do_singlet = .TRUE.
         xas_tdp_control%do_triplet = .FALSE.
      ELSE IF (excitation == tddfpt_triplet) THEN
         xas_tdp_control%do_singlet = .FALSE.
         xas_tdp_control%do_triplet = .TRUE.
      ELSE
         xas_tdp_control%do_singlet = .TRUE.
         xas_tdp_control%do_triplet = .TRUE.
      END IF

      CALL section_vals_val_get(xas_tdp_section, "N_EXCITED", i_val=xas_tdp_control%n_excited)

      IF (.NOT. ASSOCIATED(xas_tdp_control%list_ex_kinds)) THEN
         IF (xas_tdp_control%define_excited .EQ. xas_tdp_by_index) THEN

            ALLOCATE (xas_tdp_control%list_ex_kinds(0))

         ELSE IF (xas_tdp_control%define_excited .EQ. xas_tdp_by_kind) THEN                   

            CALL section_vals_val_get(xas_tdp_section, "KIND_LIST", c_vals=k_list)
         
            IF (ASSOCIATED(k_list)) THEN
               nexc = SIZE(k_list)
               ALLOCATE (xas_tdp_control%list_ex_kinds(nexc))
               xas_tdp_control%list_ex_kinds = k_list
            END IF

         END IF
      END IF

      IF (.NOT. ASSOCIATED(xas_tdp_control%list_ex_atoms)) THEN
         IF (xas_tdp_control%define_excited .EQ. xas_tdp_by_kind) THEN
            
            ALLOCATE (xas_tdp_control%list_ex_atoms(0))

         ELSE IF (xas_tdp_control%define_excited .EQ. xas_tdp_by_index) THEN

            CALL section_vals_val_get(xas_tdp_section, "ATOM_LIST", i_vals=a_list)

            IF (ASSOCIATED(a_list)) THEN
               nexc = SIZE(a_list)
               CALL reallocate(xas_tdp_control%list_ex_atoms, 1, nexc)
               xas_tdp_control%list_ex_atoms = a_list
            END IF

         END IF
      END IF

      CALL section_vals_val_get(xas_tdp_section, "STATE_TYPES", n_rep_val=nrep)

      IF(.NOT. ASSOCIATED(xas_tdp_control%state_types)) THEN
         ALLOCATE (xas_tdp_control%state_types(nrep,nexc))
         DO irep = 1,nrep
            CALL section_vals_val_get(xas_tdp_section, "STATE_TYPES", i_rep_val=irep, i_vals=t_list)
            IF (SIZE(t_list) .NE. nexc) THEN
               CPABORT("The STATE_TYPES keywords do not have the correct number of entries.")
            END IF
            xas_tdp_control%state_types(irep,:) = t_list
         END DO
      END IF
      
      CALL section_vals_val_get(xas_tdp_section, "STATE_SEARCH", i_val=xas_tdp_control%n_search)

      CALL section_vals_val_get(xas_tdp_section, "GRID", n_rep_val=nrep)

      IF (.NOT. ASSOCIATED(xas_tdp_control%grid_info)) THEN
         ALLOCATE(xas_tdp_control%grid_info(nrep,3))
         DO irep = 1, nrep
            CALL section_vals_val_get(xas_tdp_section, "GRID", i_rep_val=irep, c_vals=k_list)
            IF (SIZE(k_list) .NE. 3) CPABORT("The GRID keyword needs three values")
            xas_tdp_control%grid_info(irep,:) = k_list
         END DO
      END IF

      xas_tdp_control%loc_subsection => section_vals_get_subs_vals(xas_tdp_section, "LOCALIZE")       
      xas_tdp_control%print_loc_subsection => section_vals_get_subs_vals(&
                                                         xas_tdp_control%loc_subsection, "PRINT")                      

      !Kernel analysis
      CALL section_vals_val_get(xas_tdp_section, "KERNEL%XC_FUNCTIONAL%_SECTION_PARAMETERS_", &
                                l_val=xas_tdp_control%do_xc) 
      CALL section_vals_val_get(xas_tdp_section, "KERNEL%EXACT_EXCHANGE%_SECTION_PARAMETERS_", &
                                l_val=xas_tdp_control%do_hfx)

      IF (xas_tdp_control%do_hfx) THEN
         CALL section_vals_val_get(xas_tdp_section, "KERNEL%EXACT_EXCHANGE%SCALE", &
                                   r_val=xas_tdp_control%sx)
      END IF

      IF ((.NOT. xas_tdp_control%do_xc) .AND. (.NOT. xas_tdp_control%do_hfx)) THEN
         CPABORT("You must at least define a XC functional OR exact exchange.")
      END IF
      
   END SUBROUTINE read_xas_tdp_control

!> *************************************************************************************************
!> \brief Creates a TDP XAS environment type
!> \param xas_tdp_env the type to create
!> *************************************************************************************************
   SUBROUTINE xas_tdp_env_create(xas_tdp_env)

      TYPE(xas_tdp_env_type), POINTER                    :: xas_tdp_env

      CHARACTER(len=*), PARAMETER                        :: routineN = 'xas_tdp_env_create', &
                                                            routineP = moduleN//':'//routineN

      ALLOCATE (xas_tdp_env)

      xas_tdp_env%nex_atoms = 1
      xas_tdp_env%nex_kinds = 1

      NULLIFY (xas_tdp_env%ex_atom_indices)
      NULLIFY (xas_tdp_env%ex_kind_indices)
      NULLIFY (xas_tdp_env%state_types)
      NULLIFY (xas_tdp_env%donor_states)
      NULLIFY (xas_tdp_env%qs_loc_env)
      NULLIFY (xas_tdp_env%mos_of_ex_atoms)
      NULLIFY (xas_tdp_env%ri_inv_mats)
      NULLIFY (xas_tdp_env%q_projector)
      NULLIFY (xas_tdp_env%p_projector)
      NULLIFY (xas_tdp_env%dipmat)
      NULLIFY (xas_tdp_env%ri_coul3)
      NULLIFY (xas_tdp_env%ri_fxc_sg)
      NULLIFY (xas_tdp_env%ri_fxc_tp)
      NULLIFY (xas_tdp_env%orb_soc)

!     Putting the state types as char manually
      xas_tdp_env%state_type_char(1) = "1s"
      xas_tdp_env%state_type_char(2) = "2s"
      xas_tdp_env%state_type_char(3) = "2p"

   END SUBROUTINE xas_tdp_env_create

!> *************************************************************************************************
!> \brief Releases the TDP XAS environment type
!> \param xas_tdp_env the type to release
!> *************************************************************************************************
   SUBROUTINE xas_tdp_env_release(xas_tdp_env)

      TYPE(xas_tdp_env_type), POINTER                    :: xas_tdp_env                              
                                                                                                           
      CHARACTER(len=*), PARAMETER                        :: routineN = 'xas_tdp_env_release', &         
                                                            routineP = moduleN//':'//routineN

      INTEGER                                            :: i

      IF (ASSOCIATED(xas_tdp_env)) THEN
         IF (ASSOCIATED(xas_tdp_env%ex_atom_indices)) THEN
            DEALLOCATE(xas_tdp_env%ex_atom_indices)
         END IF
         IF (ASSOCIATED(xas_tdp_env%ex_kind_indices)) THEN
            DEALLOCATE(xas_tdp_env%ex_kind_indices)
         END IF

         IF (ASSOCIATED(xas_tdp_env%state_types)) THEN
            DEALLOCATE(xas_tdp_env%state_types)
         END IF
         IF (ASSOCIATED(xas_tdp_env%donor_states)) THEN
            CALL deallocate_donor_state_set(xas_tdp_env%donor_states)
         END IF
         IF (ASSOCIATED(xas_tdp_env%qs_loc_env)) THEN
            CALL qs_loc_env_release(xas_tdp_env%qs_loc_env)
         END IF
         IF (ASSOCIATED(xas_tdp_env%mos_of_ex_atoms)) THEN
            DEALLOCATE(xas_tdp_env%mos_of_ex_atoms)
         END IF
         IF (ASSOCIATED(xas_tdp_env%ri_inv_mats)) THEN
            DO i =1,SIZE(xas_tdp_env%ri_inv_mats)
               DEALLOCATE(xas_tdp_env%ri_inv_mats(i)%array)
            END DO
            DEALLOCATE(xas_tdp_env%ri_inv_mats)
         END IF
         IF (ASSOCIATED(xas_tdp_env%q_projector)) THEN
            CALL dbcsr_release(xas_tdp_env%q_projector)
            DEALLOCATE(xas_tdp_env%q_projector)
         END IF
         IF (ASSOCIATED(xas_tdp_env%p_projector)) THEN
            CALL dbcsr_release(xas_tdp_env%p_projector)
            DEALLOCATE(xas_tdp_env%p_projector)
         END IF
         IF (ASSOCIATED(xas_tdp_env%dipmat)) THEN
            DO i = 1,SIZE(xas_tdp_env%dipmat)
               CALL dbcsr_release_p(xas_tdp_env%dipmat(i)%matrix)
            END DO
            DEALLOCATE(xas_tdp_env%dipmat)
         END IF
         IF (ASSOCIATED(xas_tdp_env%ri_coul3)) THEN
            DEALLOCATE(xas_tdp_env%ri_coul3)
         END IF
         IF (ASSOCIATED(xas_tdp_env%ri_fxc_sg)) THEN
            CALL dbcsr_release(xas_tdp_env%ri_fxc_sg)
            DEALLOCATE(xas_tdp_env%ri_fxc_sg)
         END IF
         IF (ASSOCIATED(xas_tdp_env%ri_fxc_tp)) THEN
            CALL dbcsr_release(xas_tdp_env%ri_fxc_tp)
            DEALLOCATE(xas_tdp_env%ri_fxc_tp)
         END IF
         IF (ASSOCIATED(xas_tdp_env%orb_soc)) THEN
            DO i = 1,SIZE(xas_tdp_env%orb_soc)
               CALL dbcsr_release(xas_tdp_env%orb_soc(i)%matrix)
               DEALLOCATE(xas_tdp_env%orb_soc(i)%matrix)
            END DO
            DEALLOCATE(xas_tdp_env%orb_soc)
         END IF
         DEALLOCATE (xas_tdp_env)
      END IF
   END SUBROUTINE xas_tdp_env_release

!> *************************************************************************************************
!> \brief Sets values of selected variables within the TDP XAS environment type
!> *************************************************************************************************
   SUBROUTINE set_xas_tdp_env(xas_tdp_env, nex_atoms, nex_kinds)

      TYPE(xas_tdp_env_type), POINTER                    :: xas_tdp_env

      CHARACTER(len=*), PARAMETER                        :: routineN = 'set_xas_tdp_env',&
                                                            routineP = moduleN//':'//routineN
                              
      INTEGER, INTENT(IN), OPTIONAL                      :: nex_atoms
      INTEGER, INTENT(IN), OPTIONAL                      :: nex_kinds

      CPASSERT(ASSOCIATED(xas_tdp_env))

      IF (PRESENT(nex_atoms)) xas_tdp_env%nex_atoms = nex_atoms
      IF (PRESENT(nex_kinds)) xas_tdp_env%nex_kinds = nex_kinds
      
   END SUBROUTINE set_xas_tdp_env

!> *************************************************************************************************
!> \brief sets specified values of the donor state type
!> \param donor_state the type which values should be set
!> \param at_index ...
!> \param at_symbol ...
!> \param state_type ...   
!> *************************************************************************************************
   SUBROUTINE set_donor_state(donor_state, at_index, at_symbol, kind_index, state_type)

      TYPE(donor_state_type), POINTER                      :: donor_state

      CHARACTER(len=*), PARAMETER                          :: routineN = 'set_donor_state',&
                                                              routineP = moduleN//':'//routineN

      INTEGER, INTENT(IN), OPTIONAL                        :: at_index, state_type, kind_index
      CHARACTER(len=2), INTENT(IN), OPTIONAL               :: at_symbol
      
      CPASSERT(ASSOCIATED(donor_state))

      IF (PRESENT(at_index)) donor_state%at_index = at_index
      IF (PRESENT(kind_index)) donor_state%kind_index = kind_index
      IF (PRESENT(state_type)) donor_state%state_type = state_type
      IF (PRESENT(at_symbol)) donor_state%at_symbol = at_symbol

   END SUBROUTINE set_donor_state   

!> *************************************************************************************************
!> \brief Deallocate a set of donor states
!> \param donor_state_set the set of donor states to deallocate
!> *************************************************************************************************
   SUBROUTINE deallocate_donor_state_set(donor_state_set)
      TYPE(donor_state_type), DIMENSION(:) , POINTER     :: donor_state_set

      CHARACTER(len=*), PARAMETER                        :: routineN = 'deallocate_donor_state_set',&
                                                           routineP = moduleN//':'//routineN
      INTEGER                                            :: i, j

      IF (ASSOCIATED(donor_state_set)) THEN
         DO i = 1,SIZE(donor_state_set)

            IF (ASSOCIATED(donor_state_set(i)%sg_coeffs)) THEN
               DO j = 1,SIZE(donor_state_set(i)%sg_coeffs)
                  IF(ASSOCIATED(donor_state_set(i)%sg_coeffs(j)%matrix)) THEN
                     CALL cp_fm_release(donor_state_set(i)%sg_coeffs(j)%matrix)
                  END IF
               END DO
               DEALLOCATE(donor_state_set(i)%sg_coeffs)
            END IF

            IF (ASSOCIATED(donor_state_set(i)%tp_coeffs)) THEN
               DO j = 1,SIZE(donor_state_set(i)%tp_coeffs)
                  IF(ASSOCIATED(donor_state_set(i)%tp_coeffs(j)%matrix)) THEN
                     CALL cp_fm_release(donor_state_set(i)%tp_coeffs(j)%matrix)
                  END IF
               END DO
               DEALLOCATE(donor_state_set(i)%tp_coeffs)
            END IF

            IF (ASSOCIATED(donor_state_set(i)%gs_coeffs)) THEN
               CALL cp_fm_release(donor_state_set(i)%gs_coeffs)
            END IF

            IF (ASSOCIATED(donor_state_set(i)%sg_evals)) THEN
               DEALLOCATE(donor_state_set(i)%sg_evals)
            END IF

            IF (ASSOCIATED(donor_state_set(i)%tp_evals)) THEN
               DEALLOCATE(donor_state_set(i)%tp_evals)
            END IF

             IF (ASSOCIATED(donor_state_set(i)%soc_evals)) THEN
               DEALLOCATE(donor_state_set(i)%soc_evals)
            END IF
            
            IF (ASSOCIATED(donor_state_set(i)%sg_osc_str)) THEN
               DEALLOCATE(donor_state_set(i)%sg_osc_str)
            END IF

            IF (ASSOCIATED(donor_state_set(i)%tp_osc_str)) THEN
               DEALLOCATE(donor_state_set(i)%tp_osc_str)
            END IF 

            IF (ASSOCIATED(donor_state_set(i)%soc_osc_str)) THEN
               DEALLOCATE(donor_state_set(i)%soc_osc_str)
            END IF

            If (ASSOCIATED(donor_state_set(i)%energy_evals)) THEN
               DEALLOCATE(donor_state_set(i)%energy_evals)
            END IF

            IF (ASSOCIATED(donor_state_set(i)%mo_indices)) THEN
               DEALLOCATE(donor_state_set(i)%mo_indices)
            END IF

            IF (ASSOCIATED(donor_state_set(i)%sg_matrix_tdp)) THEN
               CALL dbcsr_release(donor_state_set(i)%sg_matrix_tdp)
               DEALLOCATE(donor_state_set(i)%sg_matrix_tdp)
            END IF

            IF (ASSOCIATED(donor_state_set(i)%tp_matrix_tdp)) THEN
               CALL dbcsr_release(donor_state_set(i)%tp_matrix_tdp)
               DEALLOCATE(donor_state_set(i)%tp_matrix_tdp)
            END IF

            IF (ASSOCIATED(donor_state_set(i)%metric)) THEN
               DO j = 1,SIZE(donor_state_set(i)%metric)
                  IF (ASSOCIATED(donor_state_set(i)%metric(j)%matrix)) THEN  
                     CALL dbcsr_release(donor_state_set(i)%metric(j)%matrix)      
                     DEALLOCATE(donor_state_set(i)%metric(j)%matrix)           
                  END IF
               END DO
               DEALLOCATE(donor_state_set(i)%metric)
            END IF

            IF (ASSOCIATED(donor_state_set(i)%matrix_aux)) THEN
               DO j = 1,SIZE(donor_state_set(i)%matrix_aux)
                  IF (ASSOCIATED(donor_state_set(i)%matrix_aux(j)%matrix)) THEN  
                     CALL dbcsr_release(donor_state_set(i)%matrix_aux(j)%matrix)      
                     DEALLOCATE(donor_state_set(i)%matrix_aux(j)%matrix)           
                  END IF
               END DO
               DEALLOCATE(donor_state_set(i)%matrix_aux)
            END IF

         END DO
         DEALLOCATE(donor_state_set)
      END IF

   END SUBROUTINE deallocate_donor_state_set

!> *************************************************************************************************
!> \brief Deallocate a donor_state's heavy attributes
!> \param donor_state ...
!> *************************************************************************************************
   SUBROUTINE free_ds_memory(donor_state)
      
      TYPE(donor_state_type), POINTER                    :: donor_state

      CHARACTER(len=*), PARAMETER :: routineN = "free_ds_memory", routineP = moduleN//":"//routineN

      INTEGER                                            :: i

      IF (ASSOCIATED(donor_state%sg_evals)) DEALLOCATE(donor_state%sg_evals)
      IF (ASSOCIATED(donor_state%tp_evals)) DEALLOCATE(donor_state%tp_evals)
      IF (ASSOCIATED(donor_state%soc_evals)) DEALLOCATE(donor_state%soc_evals)
      IF (ASSOCIATED(donor_state%sg_osc_str)) DEALLOCATE(donor_state%sg_osc_str)
      IF (ASSOCIATED(donor_state%tp_osc_str)) DEALLOCATE(donor_state%tp_osc_str)
      IF (ASSOCIATED(donor_state%soc_osc_str)) DEALLOCATE(donor_state%soc_osc_str)
      IF (ASSOCIATED(donor_state%gs_coeffs)) CALL cp_fm_release(donor_state%gs_coeffs)

      IF (ASSOCIATED(donor_state%sg_coeffs)) THEN
         DO i = 1,SIZE(donor_state%sg_coeffs)
            CALL cp_fm_release(donor_state%sg_coeffs(i)%matrix)
         END DO
         DEALLOCATE(donor_state%sg_coeffs)
      END IF   

      IF (ASSOCIATED(donor_state%tp_coeffs)) THEN
         DO i = 1,SIZE(donor_state%tp_coeffs)
            CALL cp_fm_release(donor_state%tp_coeffs(i)%matrix)
         END DO
         DEALLOCATE(donor_state%tp_coeffs)
      END IF

      IF (ASSOCIATED(donor_state%sg_matrix_tdp)) THEN
         CALL dbcsr_release(donor_state%sg_matrix_tdp)
         DEALLOCATE(donor_state%sg_matrix_tdp)
      END IF

      IF (ASSOCIATED(donor_state%tp_matrix_tdp)) THEN
         CALL dbcsr_release(donor_state%tp_matrix_tdp)
         DEALLOCATE(donor_state%tp_matrix_tdp)
      END IF

      IF (ASSOCIATED(donor_state%metric)) THEN
         DO i = 1,SIZE(donor_state%metric)
            IF (ASSOCIATED(donor_state%metric(i)%matrix)) THEN   
               CALL dbcsr_release(donor_state%metric(i)%matrix) 
               DEALLOCATE(donor_state%metric(i)%matrix)  
            END IF
         END DO
         DEALLOCATE(donor_state%metric)
      END IF

      IF (ASSOCIATED(donor_state%matrix_aux)) THEN
         DO i = 1,SIZE(donor_state%matrix_aux)
            IF (ASSOCIATED(donor_state%matrix_aux(i)%matrix)) THEN   
               CALL dbcsr_release(donor_state%matrix_aux(i)%matrix) 
               DEALLOCATE(donor_state%matrix_aux(i)%matrix)  
            END IF
         END DO
         DEALLOCATE(donor_state%matrix_aux)
      END IF

   END SUBROUTINE free_ds_memory


!> *************************************************************************************************
!> \brief Creates a xas_atom_env type 
!> \param xas_atom_env ...
!> *************************************************************************************************
   SUBROUTINE xas_atom_env_create(xas_atom_env)

      TYPE(xas_atom_env_type), POINTER                   :: xas_atom_env

      CHARACTER(len=*), PARAMETER :: routineN = "xas_atom_env_create", &
                                     routineP = moduleN//":"//routineN

      ALLOCATE(xas_atom_env)
      
      NULLIFY(xas_atom_env%excited_atoms)
      NULLIFY(xas_atom_env%excited_kinds)
      NULLIFY(xas_atom_env%grid_atom_set)
      NULLIFY(xas_atom_env%harmonics_atom_set)
      NULLIFY(xas_atom_env%ri_blk_size)
      NULLIFY(xas_atom_env%ri_dcoeff)
      NULLIFY(xas_atom_env%ri_sphi_so)
      NULLIFY(xas_atom_env%orb_sphi_so)

   END SUBROUTINE xas_atom_env_create

! **************************************************************************************************
!> \brief Releases the xas_atom_env type 
!> \param xas_atom_env the type to release
! **************************************************************************************************
   SUBROUTINE xas_atom_env_release(xas_atom_env)

      TYPE(xas_atom_env_type), POINTER                   :: xas_atom_env

      CHARACTER(len=*), PARAMETER :: routineN = "xas_atom_env_release", &
                                     routineP = moduleN//":"//routineN

      INTEGER                                            :: i 

      IF (ASSOCIATED(xas_atom_env%grid_atom_set)) THEN 
         DO i = 1,SIZE(xas_atom_env%grid_atom_set)
            IF (ASSOCIATED(xas_atom_env%grid_atom_set(i)%grid_atom)) THEN
               CALL deallocate_grid_atom(xas_atom_env%grid_atom_set(i)%grid_atom)
            END IF
         END DO
         DEALLOCATE(xas_atom_env%grid_atom_set)
      END IF

      IF (ASSOCIATED(xas_atom_env%harmonics_atom_set)) THEN
         DO i = 1,SIZE(xas_atom_env%harmonics_atom_set)
            IF (ASSOCIATED(xas_atom_env%harmonics_atom_set(i)%harmonics_atom)) THEN 
               CALL deallocate_harmonics_atom(xas_atom_env%harmonics_atom_set(i)%harmonics_atom)
            END IF
         END DO
         DEALLOCATE(xas_atom_env%harmonics_atom_set)
      END IF

      IF (ASSOCIATED(xas_atom_env%excited_kinds)) THEN
         DEALLOCATE(xas_atom_env%excited_kinds)
      END IF

      IF (ASSOCIATED(xas_atom_env%excited_atoms)) THEN
         DEALLOCATE(xas_atom_env%excited_atoms)
      END IF

      IF (ASSOCIATED(xas_atom_env%ri_blk_size)) THEN
         DEALLOCATE(xas_atom_env%ri_blk_size)
      END IF

      IF (ASSOCIATED(xas_atom_env%ri_dcoeff)) THEN
         DO i = 1,SIZE(xas_atom_env%ri_dcoeff)
            IF (ASSOCIATED(xas_atom_env%ri_dcoeff(i)%array)) THEN
               DEALLOCATE(xas_atom_env%ri_dcoeff(i)%array)
            END IF
         END DO
         DEALLOCATE(xas_atom_env%ri_dcoeff)
      END IF

      IF (ASSOCIATED(xas_atom_env%ri_sphi_so)) THEN
         DO i = 1,SIZE(xas_atom_env%ri_sphi_so)
            IF (ASSOCIATED(xas_atom_env%ri_sphi_so(i)%array)) THEN 
               DEALLOCATE(xas_atom_env%ri_sphi_so(i)%array)
            END IF
         END DO
         DEALLOCATE(xas_atom_env%ri_sphi_so)
      END IF

      IF (ASSOCIATED(xas_atom_env%orb_sphi_so)) THEN
         DO i = 1,SIZE(xas_atom_env%orb_sphi_so)
            IF (ASSOCIATED(xas_atom_env%orb_sphi_so(i)%array)) THEN 
               DEALLOCATE(xas_atom_env%orb_sphi_so(i)%array)
            END IF
         END DO
         DEALLOCATE(xas_atom_env%orb_sphi_so)
      END IF

      DEALLOCATE(xas_atom_env)

   END SUBROUTINE xas_atom_env_release

END MODULE xas_tdp_types
