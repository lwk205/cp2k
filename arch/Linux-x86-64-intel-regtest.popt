# Tested with: Intel(R) Fortran Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 18.0.5.274 Build 20180823
#              Intel MPI, MKL, Libint 1.1.6, Libxc 4.3.4, libxsmm 1.9, ELPA 2017.05.003, PLUMED 2.4.1
# Author: Matthias Krack (matthias.krack@psi.ch, PSI, March 2019)

include      $(MPI_PATH)/plumed/2.4.1/lib/plumed/src/lib/Plumed.inc.static

ELPA_VER    = 2017.05.003
ELPA_INC    = $(MPI_PATH)/elpa/$(ELPA_VER)/include/elpa-$(ELPA_VER)
ELPA_LIB    = $(MPI_PATH)/elpa/$(ELPA_VER)/lib

LIBINT_INC  = $(INTEL_DIR)/libint/1.1.6-LARGE_L/include
LIBINT_LIB  = $(INTEL_DIR)/libint/1.1.6-LARGE_L/lib
LIBXC_INC   = $(INTEL_DIR)/libxc/4.3.4/include
LIBXC_LIB   = $(INTEL_DIR)/libxc/4.3.4/lib
LIBXSMM_INC = $(INTEL_DIR)/libxsmm/1.9/include
LIBXSMM_LIB = $(INTEL_DIR)/libxsmm/1.9/lib

CC          = mpicc
CPP         =
FC          = mpiifort
LD          = mpiifort
AR          = ar -r
CPPFLAGS    =
DFLAGS      = -D__ELPA=201705 -D__FFTW3 -D__LIBINT -D__LIBXC -D__LIBXSMM \
              -D__MKL -D__MPI_VERSION=3 -D__PLUMED2 \
              -D__LIBINT_MAX_AM=7 -D__LIBDERIV_MAX_AM1=6 -D__MAX_CONTR=4 \
              -D__parallel -D__SCALAPACK -D__CHECK_DIAG
CFLAGS      = $(DFLAGS) -O2
FCFLAGS     = $(DFLAGS) -O2
FCFLAGS    += -fpp -free -funroll-loops
FCFLAGS    += -fp-model precise
FCFLAGS    += -g -traceback
FCFLAGS    += -I${MKLROOT}/include -I${MKLROOT}/include/fftw
FCFLAGS    += -I$(LIBINT_INC)
FCFLAGS    += -I$(LIBXC_INC)
FCFLAGS    += -I$(LIBXSMM_INC)
FCFLAGS    += -I$(ELPA_INC)/elpa -I$(ELPA_INC)/modules
LDFLAGS     = $(FCFLAGS) -static-intel -static_mpi
LDFLAGS_C   = $(FCFLAGS) -static-intel -nofor_main
MKL_LIB     = ${MKLROOT}/lib/intel64
LIBS        = $(PLUMED_DEPENDENCIES) -lgsl -lgslcblas -lz
LIBS       += $(ELPA_LIB)/libelpa.a -lstdc++
LIBS       += $(MKL_LIB)/libmkl_scalapack_lp64.a \
              -Wl,--start-group \
              $(MKL_LIB)/libmkl_intel_lp64.a \
              ${MKL_LIB}/libmkl_sequential.a \
              $(MKL_LIB)/libmkl_core.a \
              ${MKL_LIB}/libmkl_blacs_intelmpi_lp64.a \
              -Wl,--end-group
LIBS       += $(LIBXC_LIB)/libxcf03.a $(LIBXC_LIB)/libxc.a
LIBS       += $(LIBINT_LIB)/libderiv.a $(LIBINT_LIB)/libint.a
LIBS       += $(LIBXSMM_LIB)/libxsmmf.a $(LIBXSMM_LIB)/libxsmm.a

# Required due to memory leak that occurs if high optimisations are used
mp2_optimize_ri_basis.o: mp2_optimize_ri_basis.F
	$(FC) -c $(subst O2,O0,$(FCFLAGS)) $<
